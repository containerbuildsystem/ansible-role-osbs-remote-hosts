---
- name: Create group for user running rootless podman
  ansible.builtin.group:
    name: "{{ podman_user_group_name }}"
    gid: "{{ podman_user_group_gid }}"

- name: Create user for running rootless podman
  ansible.builtin.user:
    name: "{{ podman_user_name }}"
    uid: "{{ podman_user_uid }}"
    group: "{{ podman_user_group_name }}"

- name: Set subordinate user/group IDs for podman user
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    line: "{{ item.line }}"
    regexp: "{{ item.regex }}"
    create: true
    state: present
    mode: 0644
  with_items:
    - path: "/etc/subuid"
      regex: "^{{ podman_user_name }}:"
      line: "{{ podman_user_name }}:{{ podman_user_subordinate_uid_start }}:{{ podman_user_subordinate_uid_count }}"
    - path: "/etc/subgid"
      regex: "^{{ podman_user_group_name }}:"
      line: "{{ podman_user_group_name }}:{{ podman_user_subordinate_gid_start }}:{{ podman_user_subordinate_gid_count }}"
  notify:
    - migrate podman containers

- name: Setup authorized keys for podman ssh user
  authorized_key:
    user: "{{ podman_ssh_user_name if podman_ssh_user_name is defined else podman_user_name }}"
    key: "{{ podman_ssh_user_public_key }}"
    manage_dir: true
  when: podman_ssh_user_public_key is defined

- name: Enable persistent user session to allow running long-running services without logged in
  ansible.builtin.command: loginctl enable-linger {{ podman_user_name }}
  changed_when: false

- name: Enable user lingering for ssh user to create systemd user runtime directory when system boot up
  ansible.builtin.command: loginctl enable-linger {{ podman_ssh_user_name }}
  when: podman_ssh_user_name is defined and podman_ssh_user_name != podman_user_name
  changed_when: false

- name: Add podman ssh user to podman run user group
  ansible.builtin.user:
    name: "{{ podman_ssh_user_name }}"
    groups: "{{ podman_user_group_name }}"
    append: true
  when: podman_ssh_user_name is defined and podman_ssh_user_name != podman_user_name

- name: Install Podman on RHEL8 server
  ansible.builtin.dnf:
    name:
      - podman
    state: present

- name: Copy podman.socket systemd user config file
  ansible.builtin.template:
    src: "systemd/user/podman.socket.j2"
    dest: "/etc/systemd/user/podman.socket"
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd for podman user
    - restart rootless podman

- name: Copy podman.service systemd user config file
  ansible.builtin.template:
    src: "systemd/user/podman.service.j2"
    dest: "/etc/systemd/user/podman.service"
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd for podman user
    - restart rootless podman

- name: Create drop-in configuration directory for podman user systemd service
  ansible.builtin.file:
    path: "/etc/systemd/system/user@{{ podman_user_uid }}.service.d"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Create drop-in configuration directory for users systemd service
  ansible.builtin.file:
    path: "/etc/systemd/system/user@.service.d"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Create drop-in configuration directory for user slice service
  ansible.builtin.file:
    path: "/etc/systemd/system/user-.slice.d"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Apply root slice
  ansible.builtin.template:
    src: "systemd/system/user-0.slice.j2"
    dest: "/etc/systemd/system/user-0.slice"
    owner: root
    group: root
    mode: 0644

- name: Apply cgroup v2 limits to users systemd service
  ansible.builtin.template:
    src: "systemd/system/delegate.conf.j2"
    dest: "/etc/systemd/system/user@.service.d/delegate.conf"
    owner: root
    group: root
    mode: 0644

- name: Apply overrides to users slice
  ansible.builtin.template:
    src: "systemd/system/override.conf.j2"
    dest: "/etc/systemd/system/user-.slice.d/override.conf"
    owner: root
    group: root
    mode: 0644

- name: Create separate rhsm.conf for mounting into containers
  ansible.builtin.copy:
    content: |
      [rhsm]
      manage_repos = 0
    dest: /etc/rhsm-for-osbs-builds.conf
    force: true
    group: root
    owner: root
    mode: 0644

- name: Create /etc/containers/mounts.conf to override podman default mounts
  # See also: man containers-mounts.conf (shipped by containers-common)
  # This is to avoid host repos being injected into OSBS image builds
  # We mount only the rhsm.conf file where we tell subscription-manager
  # not to manage repos.
  ansible.builtin.copy:
    content: |
      /etc/rhsm-for-osbs-builds.conf:/run/secrets/rhsm/rhsm.conf
    dest: /etc/containers/mounts.conf
    force: true
    group: root
    owner: root
    mode: 0664

- name: Apply 50-file-limits.conf to systemd/system
  # Overrides system NOFILE limit
  ansible.builtin.template:
    src: "systemd/system/50-file-limits.conf.j2"
    dest: "/etc/systemd/system.conf.d/50-file-limits.conf"
    group: root
    owner: root
    mode: 0644

- name: Apply /etc/containers/containers.conf
  # Currently, only increases NOFILE limit
  ansible.builtin.template:
    src: "containers/containers.conf.j2"
    dest: "/etc/containers/containers.conf"
    group: root
    owner: root
    mode: 0664

- name: Install machinectl to start podman service
  ansible.builtin.dnf:
    name:
      - systemd-container
    state: present

- name: Enable and start rootless podman.socket
  # rootless podman backend need to be started with a login session, so
  # ansible become methods ("sudo", "su" and etc) don't work in this
  # case, become method "machinectl" is not flexible enough to fulfill
  # the requirement either, run machinectl command as a workaround
  ansible.builtin.command: machinectl shell {{ podman_user_name }}@.host /usr/bin/systemctl --user enable --now podman.socket
  changed_when: false

- name: Add podman pruning cronjob
  ansible.builtin.cron:
    name: "podman pruner"
    minute: "*/{{ podman_pruning_interval_minutes }}"
    user: "{{ podman_user_name }}"
    job: 'podman system prune --all --filter "until={{ podman_pruning_until }}" -f'

- name: Set up buildah container pruner
  block:
    - name: Sanity-check buildah_pruning_before
      ansible.builtin.command:
        argv:
          - date
          - --date
          - '{{ buildah_pruning_before }}'
      changed_when: false

    - name: Install jq (prerequisite for buildah pruning script)
      ansible.builtin.dnf:
        name:
          - jq
        state: present

    - name: Copy buildah pruning script
      ansible.builtin.copy:
        src: prune-buildah-containers.sh
        dest: /usr/local/bin/prune-buildah-containers.sh
        force: true
        group: root
        owner: root
        mode: 0775

    - name: Add buildah pruning cronjob
      ansible.builtin.cron:
        name: "buildah container pruner"
        minute: "0"
        hour: "*/{{ buildah_pruning_interval_hours }}"
        user: "{{ podman_user_name }}"
        job: "/usr/local/bin/prune-buildah-containers.sh '{{ buildah_pruning_before }}'"
  when: buildah_pruning_enabled
